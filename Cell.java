


public class Cell {
	public static int[][] initializeCells(int x, int y) {
		    int[][] Cells=
		    {{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
			{0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
			{0,1,0,0,0,1,0,1,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,1,0},
			{0,1,1,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,1,0,1,0,1,0},
			{0,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,0,1,0,1,0,1,0},
			{0,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0,1,1,1,1,1,1,0,1,0},
			{0,1,0,1,0,1,1,1,1,1,0,1,1,0,1,0,1,0,0,0,0,1,0,1,0},
			{0,1,0,1,0,0,0,0,0,0,0,1,1,0,1,0,1,0,1,1,0,1,0,1,0},
			{0,1,0,1,0,1,1,1,1,1,1,1,1,0,1,0,1,0,1,1,0,1,0,1,0},
			{0,1,0,1,0,1,0,0,0,0,0,0,1,0,1,0,1,0,0,1,0,1,0,1,0},
			{0,1,0,1,0,1,1,1,1,1,1,0,1,0,0,0,1,1,1,1,0,1,0,1,0},
			{0,1,0,1,0,1,1,1,0,0,1,0,1,1,1,1,1,1,0,1,0,1,1,1,0},
			{0,1,0,1,0,0,0,1,0,0,1,1,1,0,0,0,0,0,0,1,0,1,1,1,0},
			{0,1,0,1,1,1,1,1,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0,0,0},
			{0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,0,1,1,1,1,1,0},
			{0,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0},
			{0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,1,1,1,0,1,1,1,0},
			{0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,1,0,0,0},
			{0,1,0,1,0,0,0,1,0,1,0,0,1,1,0,1,1,1,0,1,0,1,0,1,0},
			{0,1,0,1,0,1,1,1,0,1,1,0,1,1,0,0,0,0,0,1,0,1,0,1,0},
			{0,1,0,1,0,0,0,0,0,0,1,0,1,1,1,1,0,1,0,1,0,1,0,1,0},
			{0,1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,0,1,0,1,1,1,0},
			{0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,1,0,0,0,1,0},
			{0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,0},
			{0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
	return Cells;
	
		
	}
	//Μέθοδος που ελέγχει εάν ο Θησέας έχει την δυνατότητα να κινηθεί προς κάποια κατεύθυνση.
	 //Θα καλείται από την την μέθοδο που θα του επιτρέπει να κινηθεί στον χώρο.
	
    public boolean checkWalls(int x,int y,int[][] Cells) {
    	if (Cells[x+1][y]==1 || Cells[x-1][y]==1 || Cells[x][y+1]==1||Cells[x][y-1]==1) {
    		return true;
    	}else {
    		return false;
    	}
    } 
	

}
